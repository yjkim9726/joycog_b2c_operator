<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 로그파일 저장 경로 -->
    <springProfile name="dev">
        <property name="LOG_PATH" value="/home/ubuntu/log"/>
        <property name="LOG_FILE_NAME" value="logDev"/>
        <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
    </springProfile>

    <!-- CONSOLE -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
    <!-- // CONSOLE -->
    <!-- SYSLOG -->
    <appender name="SYSLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                ${LOG_PATTERN}
            </Pattern>
        </layout>
        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/lastDay/logDev.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1GB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>5</maxHistory>         <!-- 로그 파일이 보관되는 최대 기간 -->
            <totalSizeCap>4GB</totalSizeCap>        <!-- 지정된 크기를 초과하면 오래된 로그 파일부터 삭제 현재 4GB 로 설정-->
        </rollingPolicy>
    </appender>
    <!-- // SYSLOG -->


    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="SYSLOG"/>
    </root>
    <logger name="com.emotiv" level="debug" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="SYSLOG"/>
    </logger>

    <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="OFF"/>
    <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
    <logger name="jdbc.connection" level="OFF" additivity="OFF"/>
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" level="OFF"/>
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" level="DEBUG"/>
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
    <logger name="jdbc.audit" level="OFF"/>
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF"/>
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="OFF"/>
</configuration>